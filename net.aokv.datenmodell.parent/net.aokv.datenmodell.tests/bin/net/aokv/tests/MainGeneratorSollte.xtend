/*
 * generated by Xtext 2.9.0
 */
package net.aokv.tests

import com.google.inject.Inject
import org.eclipse.xtext.junit4.InjectWith
import org.eclipse.xtext.junit4.XtextRunner
import org.eclipse.xtext.junit4.util.ParseHelper
import org.junit.Assert
import org.junit.Test
import org.junit.runner.RunWith
import net.aokv.datenmodell.Datenmodell
import net.aokv.generator.MainGenerator

@RunWith(XtextRunner)
@InjectWith(DatenmodellInjectorProvider)
class MainGeneratorSollte{

	@Inject
	MainGenerator sut;

	@Inject
	ParseHelper<Datenmodell> parseHelper;

	@Test
	def void ablaufFuerEinfacheKlasseGenerieren() {
		val datenmodell = parseHelper.parse('''
			Eine Person hat Name vom Typ Text.
			Es gibt eine Person mit Name "Stefan".
		''')
		val expected = '''
public class Main
{
	public static void main(String[] args)
	{
		Person person1 = new Person();
		person1.setName("Stefan");
		System.out.println(person1);
	}
}
'''
		println(sut.compile(datenmodell).toString)
		Assert.assertEquals(expected, sut.compile(datenmodell).toString)
	}

	@Test
	def void ablaufFuerKomplexeKlasseGenerieren() {
		val datenmodell = parseHelper.parse('''
			Eine Person hat 
				Name vom Typ Text
				und Alter vom Typ Zahl.
				
			Es gibt eine Person mit 
				Name "Stefan"
				und Alter 21.
		''')
		val expected = '''
public class Main
{
	public static void main(String[] args)
	{
		Person person1 = new Person();
		person1.setName("Stefan");
		person1.setAlter(21);
		System.out.println(person1);
	}
}
'''
		println(sut.compile(datenmodell).toString)
		Assert.assertEquals(expected, sut.compile(datenmodell).toString)
	}
}
