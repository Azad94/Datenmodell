/*
 * generated by Xtext 2.9.0
 */
package net.aokv.tests

import com.google.inject.Inject
import org.eclipse.xtext.junit4.InjectWith
import org.eclipse.xtext.junit4.XtextRunner
import org.eclipse.xtext.junit4.util.ParseHelper
import org.junit.Assert
import org.junit.Test
import org.junit.runner.RunWith
import net.aokv.datenmodell.Datenmodell
import net.aokv.generator.JavaClassGenerator
import net.aokv.datenmodell.Datendefinition

@RunWith(XtextRunner)
@InjectWith(DatenmodellInjectorProvider)
class JavaClassGeneratorSollte{

	@Inject
	JavaClassGenerator sut;

	@Inject
	ParseHelper<Datenmodell> parseHelper;

	@Test
	def void einfacheKlasseGenerieren() {
		val datenmodell = parseHelper.parse('''
			Eine Person hat Name vom Typ Text.
		''')
		val expected = '''
public class Person
{
	private String name;
	
	public String getName()
	{
		return name;
	}
	
	public void setName(String name)
	{
		this.name = name;
	}
	
	@Override
	public String toString()
	{
		return String.format("Objekt %s { Name = %s }",
			"Person",
			getName()
		);
	}
}
'''
		val datendefinition = datenmodell.elemente.filter(Datendefinition).head
		Assert.assertEquals(expected, sut.compile(datendefinition).toString)
	}

	@Test
	def void komplexeKlasseGenerieren() {
		val datenmodell = parseHelper.parse('''
			Eine Person hat 
				Vorname vom Typ Text
				und Nachname vom Typ Text
				und Alter vom Typ Zahl.
		''')
		val expected = '''
public class Person
{
	private String vorname;
	
	public String getVorname()
	{
		return vorname;
	}
	
	public void setVorname(String vorname)
	{
		this.vorname = vorname;
	}
	
	private String nachname;
	
	public String getNachname()
	{
		return nachname;
	}
	
	public void setNachname(String nachname)
	{
		this.nachname = nachname;
	}
	
	private int alter;
	
	public int getAlter()
	{
		return alter;
	}
	
	public void setAlter(int alter)
	{
		this.alter = alter;
	}
	
	@Override
	public String toString()
	{
		return String.format("Objekt %s { Vorname = %s, Nachname = %s, Alter = %s }",
			"Person",
			getVorname(),
			getNachname(),
			getAlter()
		);
	}
}
'''
		val datendefinition = datenmodell.elemente.filter(Datendefinition).head
		println(sut.compile(datendefinition).toString)
		Assert.assertEquals(expected, sut.compile(datendefinition).toString)
	}

}
